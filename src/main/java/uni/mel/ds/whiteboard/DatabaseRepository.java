package uni.mel.ds.whiteboard;

import sun.font.TrueTypeFont;

import java.io.File;
import java.sql.*;
import java.util.ArrayList;
import java.util.Date;

/**
 * Created by hannah on 27/9/17.
 */
public class DatabaseRepository {
    private static final String DB_FILE = "whiteBoard.db";

    private Connection connection;


    public DatabaseRepository() {
        super();
        init();
    }

    // get the total name list of the current active whiteboard
    public ArrayList<String> getNamelist() {
        ArrayList<String> namelist = new ArrayList<String>(100);
        String sql = "SELECT * FROM People, WhiteboardItem WHERE " +
                "People.WHITEBOARDID=WhiteboardItem.ID AND  WhiteboardItem.STATUS ";
        try {
            Connection c = getConnection();
            Statement stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {

                String username = rs.getString("USERNAME");
                namelist.add(username);
            }
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return  namelist;

    }

    //get the current active whiteboard's id
    public int getActiveWhiteboardId() {
        int id=0;
        String sql = "SELECT * FROM WhiteboardItem WHERE STATUS ";
        try {
            Connection c = getConnection();
            Statement stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                id = rs.getInt("ID");
            }
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return id;
    }


    //add a new canvasItem and return its id which is automatically generated by db
    public int addCanvasItem(String managerUsername, String canvasName, String canvasPath) {
        Connection c = getConnection();
        try {
            PreparedStatement stmt = c.prepareStatement("INSERT INTO CanvasItem (MANAGERUSERNAME,CANVASNAME,CANVASPATH) VALUES (?,?,?)", Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, managerUsername);
            stmt.setString(2, canvasName);
            stmt.setString(3, canvasPath);
            stmt.executeUpdate();

            int affectedRows = stmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Creating user failed, no rows affected.");
            }

            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return (generatedKeys.getInt(1));
                } else {
                    throw new SQLException("Creating user failed, no ID obtained.");
                }
            } finally {
                stmt.close();
                c.close();
            }
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }

    }

    //read canvasItem from database
    public CanvasItem getCanvasItem(int canvasId) {
        CanvasItem canvasItem = null;
        String sql = "SELECT * FROM CanvasItem WHERE ID =\"" + canvasId + "\"";
        try {
            Connection c = getConnection();
            Statement stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                int id = rs.getInt("ID");
                String managerUsername = rs.getString("MANAGERUSERNAME");
                String canvasName = rs.getString("CANVASNAME");
                String canvaspath = rs.getString("CANVASPATH");
                canvasItem = new CanvasItem(id, managerUsername, canvasName, canvaspath);
            }
                        stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return canvasItem;
    }





    //read chat history from database, being invoked every 0.5 seconds
    public ArrayList<ChatItem> getChatItem() {
        ArrayList<ChatItem> list = new ArrayList<ChatItem>(100);

        String sql = "SELECT * FROM ChatItem";
        try {
            Connection c = getConnection();
            Statement stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                int id = rs.getInt("ID");
                String username = rs.getString("USERNAME");
                String content = rs.getString("CONTENT");
                Date time = rs.getDate("CHATTIME");
                ChatItem chatItem = new ChatItem(id, username, content, time);
                list.add(chatItem);
            }
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return list;
    }

    //add chat entry to database
    public boolean addChatItem(ChatItem chatItem) {
        try {
            String username = chatItem.getUsername();
            String content = chatItem.getContent();
            Connection c = getConnection();
            PreparedStatement stmt = c.prepareStatement("INSERT INTO ChatItem (USERNAME,CONTENT)" +
                    " VALUES (?,?)");
            stmt.setString(1, username);
            stmt.setString(2, content);
            stmt.executeUpdate();
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return true;
    }

    // get draw Item from database
    public ArrayList<DrawItem> getDrawItem(int canvasId) {
        ArrayList<DrawItem> list = new ArrayList<DrawItem>(200);

        String sql = "SELECT * FROM DrawItem WHERE CANVASID =\"" + canvasId + "\"";
        try {
            Connection c = getConnection();
            Statement stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                int id = rs.getInt("ID");
                String action = rs.getString("ACTIONNAME");
                DrawItem drawItem = new DrawItem(id, canvasId, action);
                list.add(drawItem);
            }
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return list;
    }

    //add drawItem to db
    public boolean addDrawItem(DrawItem drawItem) {
        try {
            int canvasId=drawItem.getCanvasId();
            String action = drawItem.getAction();

            Connection c = getConnection();
            PreparedStatement stmt = c.prepareStatement("INSERT INTO DrawItem (CANVASID,ACTIONNAME)" +
                    " VALUES (?,?)");

            stmt.setInt(1, canvasId);
            stmt.setString(2, action);

            stmt.executeUpdate();
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return true;
    }

    //get people information from db
    public People getPeople(String inputUsername) {
        String username=inputUsername;

        People people = null;
        String sql = "SELECT * FROM People WHERE USERNAME =\""+ inputUsername + "\"";

        try {
            Connection c = getConnection();
            Statement stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                int whiteBoardId = rs.getInt("WHITEBOARDID");
                Boolean isManager = rs.getBoolean("ISMANAGER");
                Boolean status = rs.getBoolean("STATUS");
                people = new People(whiteBoardId, username, isManager, status);
            }
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return people;


    }


    //kickpeople: update the person's status to false
    public Boolean kickPeople(String username) {
        Boolean status=false;
        String sql = "UPDATE People SET status = ?  ";
        try {
            Connection c = getConnection();
            PreparedStatement stmt = c.prepareStatement(sql);
            stmt.setBoolean(1,status);
            stmt.executeUpdate();
            stmt.close();
            c.close();

        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return true;


    }



    //add a new user to db
    public boolean addPeople(People people) {
        try {
            int whiteboardId = people.getWhiteboardId();
            String userName = people.getUsername();
            Boolean isManager = people.getManager();
            Boolean status = people.getStatus();


            Connection c = getConnection();
            PreparedStatement stmt = c.prepareStatement("INSERT INTO People(WHITEBOARDID,USERNAME,ISMANAGER,STATUS)" +
                    " VALUES (?,?,?,?)");


            stmt.setInt(1, whiteboardId);
            stmt.setString(2, userName);
            stmt.setBoolean(3, isManager);
            stmt.setBoolean(4, status);


            stmt.executeUpdate();
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return true;

    }

    // get whiteboard information from db
    public WhiteBoardItem getWhiteboardItem(int whiteBoardId) {
        WhiteBoardItem whiteBoardItem = null;
        String sql = "SELECT * FROM WhiteboardItem WHERE ID =\"" + whiteBoardId + "\"";
        try {
            Connection c = getConnection();
            Statement stmt = c.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            if (rs.next()) {
                int id = rs.getInt("ID");
                String managerUsername = rs.getString("MANAGER");
                //Date time = rs.getDate("CREATETIME");
                Boolean status = rs.getBoolean("STATUS");
                whiteBoardItem = new WhiteBoardItem(id, managerUsername, status);
            }
            stmt.close();
            c.close();
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }
        return whiteBoardItem;

    }


    //create whiteboard and return whiteboard id which is generated automatically by db
    public int addWhiteBoardItem(String InputManagerUsername) {
        String managerUsername=InputManagerUsername;
        try {
            Boolean status = true;

            Connection c = getConnection();
            PreparedStatement stmt = c.prepareStatement("INSERT INTO WhiteboardItem(MANAGER,STATUS)" +
                    " VALUES (?,?)",Statement.RETURN_GENERATED_KEYS);
            stmt.setString(1, managerUsername);
            stmt.setBoolean(2, status);
            stmt.executeUpdate();

            int affectedRows = stmt.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Creating whiteboard failed, no rows affected.");
            }

            try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return (generatedKeys.getInt(1));
                } else {
                    throw new SQLException("Creating whiteboard failed, no ID obtained.");
                }
            } finally {
                stmt.close();
                c.close();
            }

        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement", e);
        }


    }


    //when a new whiteboard was created, the old one will be set to false
    public Boolean setWhiteboardStatus(int whiteboardId) {
        Boolean status=false;
        String sql = "UPDATE WhiteboardItem SET status = ?  ";
        try {
            Connection c = getConnection();
            PreparedStatement stmt = c.prepareStatement(sql);
            stmt.setBoolean(1,status);
            stmt.executeUpdate();
            stmt.close();
            c.close();

        } catch (Exception e) {
            throw new RuntimeException("Something wrong with db statement when updating whiteboard status", e);
        }
        return true;


    }


    private Connection getConnection() {
        try {
            if (connection!=null && !connection.isClosed()){
                return  connection;
            }
            Class.forName("org.sqlite.JDBC");
            connection = DriverManager.getConnection("jdbc:sqlite:" + DB_FILE);
            return connection;
        } catch (Exception e) {
            throw new RuntimeException("Something wrong with database connection", e);
        }
    }

    private void init() {
        File dbFile = new File(DB_FILE);
        if (!dbFile.exists()) {
            try {
                Connection c = getConnection();
                Statement stmt = c.createStatement();

                // when first connected server, send manager username to db and get the whiteboardid
                // sql调试通过
                String sql = "DROP TABLE IF EXISTS WhiteboardItem;\n" +
                        "DROP TABLE IF EXISTS People;\n" +
                        "DROP TABLE IF EXISTS ChatItem;\n" +
                        "DROP TABLE IF EXISTS CanvasItem;\n" +
                        "DROP TABLE IF EXISTS DrawItem;\n" +

                        "CREATE TABLE WhiteboardItem (\n" +
                        "  ID         INTEGER PRIMARY KEY NOT NULL,\n" +
                        "  MANAGER    CHAR(100)      NOT NULL,\n" +
                        "  STATUS     BOOLEAN   NOT NULL\n" +
                        ");\n" +
                        "CREATE TABLE People (\n" +
                        "  USERNAME  CHAR(100)  PRIMARY KEY    NOT NULL,\n" +
                        "  WHITEBOARDID INTEGER  NOT NULL,\n" +
                        "  ISMANAGER BOOLEAN             NOT NULL,\n" +
                        "  STATUS    BOOLEAN             NOT NULL\n" +
                        ");\n" +
                        "CREATE TABLE ChatItem (\n" +
                        "  ID       INTEGER PRIMARY KEY   NOT NULL,\n" +
                        "  USERNAME CHAR(100)                  NOT NULL,\n" +
                        "  CHATTIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n" +
                        "  CONTENT  TEXT                  NOT NULL\n" +
                        ");\n" +
                        "CREATE TABLE CanvasItem (\n" +
                        "  ID         INTEGER PRIMARY KEY    NOT NULL,\n" +
                        "  MANAGERUSERNAME    CHAR(100)           NOT NULL,\n" +
                        "  CANVASNAME CHAR(100)                  NOT NULL,\n" +
                        "  CANVASPATH CHAR(200)                  NOT NULL\n" +
                        ");\n" +
                        "CREATE TABLE DrawItem (\n" +
                        "  ID         INTEGER PRIMARY KEY   NOT NULL,\n" +
                        " CANVASID    INTERGER     NOT NULL,\n" +
                        "  ACTIONNAME CHAR(50)                 NOT NULL\n" +
                        ");";

                stmt.executeUpdate(sql);

                stmt.close();
                c.close();
            } catch (Exception e) {
                throw new RuntimeException("Something wrong with database statement", e);
            }
        }
    }

    public void cleanUp() {
        File dbFile = new File(DB_FILE);
        if (dbFile.exists()) {
            try {
                Connection c = getConnection();
                Statement stmt = c.createStatement();

                // when first connected server, send manager username to db and get the whiteboardid
                // sql调试通过
                String sql = "DELETE FROM WhiteboardItem;\n" +
                        "DELETE FROM People;\n" +
                        "DELETE FROM ChatItem;\n" +
                        "DELETE FROM CanvasItem;\n" +
                        "DELETE FROM DrawItem;\n";

                stmt.executeUpdate(sql);

                stmt.close();
                c.close();
            } catch (Exception e) {
                throw new RuntimeException("Something wrong with database statement", e);
            }
        }
    }

}
